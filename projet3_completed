{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Projet maison n° 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# imports\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. US baby names\n",
    "\n",
    "On va s'intéresser au dataset **National data** de la SSA : https://www.ssa.gov/oact/babynames/limits.html\n",
    "\n",
    "1. Télécharger le dataset des prénoms US : https://www.ssa.gov/oact/babynames/names.zip\n",
    "\n",
    "Lire la documentation associée.\n",
    "\n",
    "2. Implémenter une fonction Python `df_names_us()` qui produit un unique DataFrame avec tous les fichiers en utilisant **pandas** (par ex. avec la fonction `pandas.concat()`), pas de bash :)\n",
    "\n",
    "Ordre et noms des colonnes du DataFrame : \"year\", \"name\", \"gender\", \"births\"\n",
    "\n",
    "Le DataFrame doit être trié selon l'année croissante puis selon l'ordre défini dans les différents fichiers (voir la documentation du dataset)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# names us\n",
    "def df_names_us():\n",
    "    i=0\n",
    "    # with this method i need a first column to concatenate\n",
    "    df = pd.read_csv(\"yob1880.txt\", header=None, names=[\"name\",\"gender\",\"births\"])\n",
    "    # I insert a column for year with the name of the file\n",
    "    df.insert(0, \"year\", \"1880\")\n",
    "    # loop over the remaining files\n",
    "    for i in range(1881,2022):\n",
    "        test = pd.read_csv(\"yob\"+str(i)+\".txt\", header=None, names=[\"name\",\"gender\",\"births\"])\n",
    "        test.insert(0, \"year\", str(i))\n",
    "        # concat 1 by one \n",
    "        df = pd.concat([df,test])\n",
    "    # change the index format\n",
    "    df.index = pd.RangeIndex(start=0,stop=len(df))\n",
    "    # change the dtype of births column\n",
    "    data_types_dict = {'births': \"int32\"}\n",
    "    df = df.astype(data_types_dict)\n",
    "    return df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. Prénoms français"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "On va s'intéresser au dataset **Fichiers France hors Mayotte** de l'INSEE :  https://www.insee.fr/fr/statistiques/2540004/\n",
    "\n",
    "L'idée est de charger les données et ensuite de les conformer au DataFrame des prénoms US. Ainsi, toute manipulation sur le DataFrame des prénoms US pourra être directement réutilisée avec le DataFrame des prénoms français.\n",
    " \n",
    "1. Télécharger le dataset des prénoms français : https://www.insee.fr/fr/statistiques/fichier/2540004/nat2021_csv.zip\n",
    "\n",
    "\n",
    "Lire la documentation, ça peut être utile...\n",
    " \n",
    "2. Implémenter une fonction `df_names_fr()` qui produit un DataFrame avec les prénoms français en prenant le DataFrame des prénoms US comme modèle :\n",
    " \n",
    " - Même ordre et mêmes noms des colonnes : \"year\", \"name\", \"gender\", \"births\"\n",
    " - Mêmes dtypes pour les colonnes\n",
    " - Mêmes valeurs pour la colonne \"gender\"\n",
    " - Seuls les prénoms de 2 caractères et plus sont conservés\n",
    " - La casse des prénoms doit être identique : initiales en majuscule, autres lettres en minuscule\n",
    " - Les lignes avec des données inutilisables doivent être supprimées\n",
    " - Les données sont triées à l'identique : year (↑), puis gender (↑), puis births (↓) et enfin name (↑)\n",
    " - L'index du DataFrame doit aller de 0 à N-1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "# names fr\n",
    "def df_names_fr():\n",
    "    df_fr = pd.DataFrame()\n",
    "    # read the csv, separation over \";\", give the name of the header\n",
    "    df_fr=pd.read_csv('nat2021.csv',sep=\";\" , names=[\"gender\", \"name\",\"year\",\"births\"],dtype=object, keep_default_na=False).loc[1:]\n",
    "    # re order the column\n",
    "    df_fr=df_fr[[\"year\",\"name\",\"gender\",\"births\"]]\n",
    "    # change the dtype like us df\n",
    "    data_types_dict = {'births': \"int32\"}\n",
    "    df_fr = df_fr.astype(data_types_dict)\n",
    "    # mapping for the gender 2=>F and 1=>M\n",
    "    mapping = {'2': 'F', '1': 'M'}\n",
    "    df_fr['gender'] = df_fr['gender'].map(mapping)\n",
    "    # take only the name with a length >2 return a lit of index to df_fr\n",
    "    df_fr=df_fr[df_fr[\"name\"].apply(lambda x: str(x)).map(len)>=2]\n",
    "    # change the typo like df_us\n",
    "    df_fr[\"name\"]=df_fr[\"name\"].str.title()\n",
    "    # drop the strange name, recup the index position then drop\n",
    "    df_fr.drop(df_fr.loc[df_fr['name']=='_Prenoms_Rares'].index, inplace=True)\n",
    "    # drop the strange year\n",
    "    df_fr.drop(df_fr.loc[df_fr['year']=='XXXX'].index, inplace=True)\n",
    "    # drop the NaN value\n",
    "    df_fr.dropna()\n",
    "    # Sort the value like in df_us\n",
    "    df_fr.sort_values(by=['year','gender','births','name'], ascending=[True, True, False, True], inplace=True)\n",
    "    # give the rigth type for the index\n",
    "    df_fr.index=pd.RangeIndex(start=0,stop=len(df_fr))\n",
    "    return df_fr"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Taux de change\n",
    "\n",
    "On va s'intéresser au dataset des cours des devises de la Banque de France :  http://webstat.banque-france.fr/fr/browseBox.do?node=5385566\n",
    "\n",
    "Les données sont dans le fichier \"Webstat_Export.csv\".\n",
    "\n",
    "L'idée est de charger les données, de les nettoyer et de pouvoir accéder aux cours de certaines devises à partir de leur code ISO3. On retiendra uniquement les colonnes se terminant effectivement par un code ISO3 entre parenthèses. Par ex., \"Dollar des Etats-Unis (USD)\".\n",
    "\n",
    "Implémenter une fonction `df_taux_change()` qui produit un DataFrame avec les taux de change par date pour une liste de codes ISO3 de devises passée en argument. L'index du DataFrame doit correspondre aux dates (voir la fonction `pd.to_datetime()` avec le format`\"%d/%m/%Y\"`) et doit être trié par ordre croissant. Les colonnes du DataFrame doivent correspondre aux devises sélectionnées."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CHF</th>\n",
       "      <th>GBP</th>\n",
       "      <th>USD</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>index</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2000-07-19</th>\n",
       "      <td>1.5473</td>\n",
       "      <td>0.61560</td>\n",
       "      <td>0.9216</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-07-20</th>\n",
       "      <td>1.5488</td>\n",
       "      <td>0.61650</td>\n",
       "      <td>0.9220</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-07-21</th>\n",
       "      <td>1.5511</td>\n",
       "      <td>0.61850</td>\n",
       "      <td>0.9363</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-07-24</th>\n",
       "      <td>1.5555</td>\n",
       "      <td>0.61510</td>\n",
       "      <td>0.9332</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-07-25</th>\n",
       "      <td>1.5538</td>\n",
       "      <td>0.62010</td>\n",
       "      <td>0.9410</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2006-12-21</th>\n",
       "      <td>1.6032</td>\n",
       "      <td>0.67160</td>\n",
       "      <td>1.3178</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2006-12-22</th>\n",
       "      <td>1.6029</td>\n",
       "      <td>0.67150</td>\n",
       "      <td>1.3192</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2006-12-27</th>\n",
       "      <td>1.6058</td>\n",
       "      <td>0.67085</td>\n",
       "      <td>1.3159</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2006-12-28</th>\n",
       "      <td>1.6058</td>\n",
       "      <td>0.67115</td>\n",
       "      <td>1.3173</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2006-12-29</th>\n",
       "      <td>1.6069</td>\n",
       "      <td>0.67150</td>\n",
       "      <td>1.3170</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1651 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "               CHF      GBP     USD\n",
       "index                              \n",
       "2000-07-19  1.5473  0.61560  0.9216\n",
       "2000-07-20  1.5488  0.61650  0.9220\n",
       "2000-07-21  1.5511  0.61850  0.9363\n",
       "2000-07-24  1.5555  0.61510  0.9332\n",
       "2000-07-25  1.5538  0.62010  0.9410\n",
       "...            ...      ...     ...\n",
       "2006-12-21  1.6032  0.67160  1.3178\n",
       "2006-12-22  1.6029  0.67150  1.3192\n",
       "2006-12-27  1.6058  0.67085  1.3159\n",
       "2006-12-28  1.6058  0.67115  1.3173\n",
       "2006-12-29  1.6069  0.67150  1.3170\n",
       "\n",
       "[1651 rows x 3 columns]"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# taux de change\n",
    "def df_taux_change(devises):\n",
    "    df = pd.DataFrame([], columns=devises) \n",
    "    df = pd.read_csv(\"Webstat_Export.csv\", sep=\";\", na_values=\"-\")\n",
    "    #index column\n",
    "    index_col = df[\"Titre :\"]\n",
    "    #drop na\n",
    "    df = df.dropna()\n",
    "    #drop lines\n",
    "    df.drop([0,1,2,3,4], inplace=True)\n",
    "    #drop col\n",
    "    for column in df:\n",
    "        dropColumn = True\n",
    "        for dev in devises:\n",
    "            if dev in column:\n",
    "                dropColumn = False\n",
    "        if dropColumn:\n",
    "            df.drop(column, inplace=True, axis=1)\n",
    "    df[\"index\"] = index_col \n",
    "    #datetime index\n",
    "    df[\"index\"] = pd.to_datetime(df[\"index\"], infer_datetime_format=True)\n",
    "    df = df.set_index('index')\n",
    "    #rename col\n",
    "    df.columns = devises  \n",
    "    #ascending index\n",
    "    df = df.sort_values(['index'], ascending=[True])\n",
    "    #float values\n",
    "    for dev in devises:\n",
    "        df[dev] = df[dev].str.replace(',', '.')\n",
    "    df = df.astype('float')\n",
    "    return df\n",
    "\n",
    "df_taux_change([\"CHF\", \"GBP\", \"USD\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Tests"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "import unittest\n",
    "\n",
    "class Session3Tests(unittest.TestCase):\n",
    "    def test_df_names_us(self):\n",
    "        df = df_names_us()\n",
    "        # colonnes\n",
    "        self.assertEqual(list(df.columns), [\"year\", \"name\", \"gender\", \"births\"])\n",
    "        # lignes\n",
    "        self.assertEqual(len(df), 2052781)\n",
    "        # index\n",
    "        self.assertTrue(isinstance(df.index, pd.core.indexes.range.RangeIndex))\n",
    "        # test NaN\n",
    "        self.assertTrue(df.loc[df.isnull().any(axis=1)].empty)\n",
    "        \n",
    "    def test_df_names_fr(self):\n",
    "        df = df_names_fr()\n",
    "        # colonnes\n",
    "        self.assertEqual(list(df.columns), [\"year\", \"name\", \"gender\", \"births\"])\n",
    "        # lignes\n",
    "        self.assertEqual(len(df), 648330)\n",
    "        # index.\n",
    "        self.assertTrue(isinstance(df.index, pd.RangeIndex))\n",
    "        # test names\n",
    "        self.assertTrue(df.loc[df.name.str.contains(r\"^[A-Z]+$\")].empty)\n",
    "        self.assertTrue(df.loc[df.name.str.contains(r\"-[a-z]+$\")].empty)\n",
    "        # test gender\n",
    "        self.assertEqual(len(df), len(df.loc[df.gender==\"F\"]) + len(df.loc[df.gender=='M']))\n",
    "        # test NaN\n",
    "        self.assertTrue(df.loc[df.isnull().any(axis=1)].empty)\n",
    "\n",
    "    def test_df_taux_change(self):\n",
    "        df = df_taux_change([\"CHF\", \"GBP\", \"USD\"])\n",
    "        # colonnes\n",
    "        self.assertEqual(list(df.columns), [\"CHF\", \"GBP\", \"USD\"])\n",
    "        # index\n",
    "        self.assertTrue(isinstance(df.index, pd.DatetimeIndex))\n",
    "        # index trié\n",
    "        self.assertEqual(list(df.index.argsort()), list(range(len(df))))\n",
    "        # types taux\n",
    "        self.assertTrue((df.dtypes == float).all())\n",
    "        # test NaN\n",
    "        self.assertTrue(df.loc[df.isnull().any(axis=1)].empty)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "# run tests\n",
    "def run_tests():\n",
    "    test_suite = unittest.makeSuite(Session3Tests)\n",
    "    runner = unittest.TextTestRunner(verbosity=2)\n",
    "    runner.run(test_suite)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "test_df_names_fr (__main__.Session3Tests) ... ok\n",
      "test_df_names_us (__main__.Session3Tests) ... ok\n",
      "test_df_taux_change (__main__.Session3Tests) ... ok\n",
      "\n",
      "----------------------------------------------------------------------\n",
      "Ran 3 tests in 19.702s\n",
      "\n",
      "OK\n"
     ]
    }
   ],
   "source": [
    "# run tests\n",
    "run_tests()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
